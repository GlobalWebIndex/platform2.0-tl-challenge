// Code generated by MockGen. DO NOT EDIT.
// Source: go-gwi/repositories (interfaces: FavouritesRepository)

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "go-gwi/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFavouritesRepository is a mock of FavouritesRepository interface.
type MockFavouritesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFavouritesRepositoryMockRecorder
}

// MockFavouritesRepositoryMockRecorder is the mock recorder for MockFavouritesRepository.
type MockFavouritesRepositoryMockRecorder struct {
	mock *MockFavouritesRepository
}

// NewMockFavouritesRepository creates a new mock instance.
func NewMockFavouritesRepository(ctrl *gomock.Controller) *MockFavouritesRepository {
	mock := &MockFavouritesRepository{ctrl: ctrl}
	mock.recorder = &MockFavouritesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavouritesRepository) EXPECT() *MockFavouritesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFavouritesRepository) Create(arg0 models.Favourite) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFavouritesRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFavouritesRepository)(nil).Create), arg0)
}

// GetByUserId mocks base method.
func (m *MockFavouritesRepository) GetByUserId(arg0 int) ([]models.Favourite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", arg0)
	ret0, _ := ret[0].([]models.Favourite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockFavouritesRepositoryMockRecorder) GetByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockFavouritesRepository)(nil).GetByUserId), arg0)
}

// Remove mocks base method.
func (m *MockFavouritesRepository) Remove(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockFavouritesRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFavouritesRepository)(nil).Remove), arg0)
}
