// Code generated by MockGen. DO NOT EDIT.
// Source: go-gwi/services (interfaces: UserService)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	contracts "go-gwi/api/contracts"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateFavourite mocks base method.
func (m *MockUserService) CreateFavourite(arg0 contracts.Cat) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavourite", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFavourite indicates an expected call of CreateFavourite.
func (mr *MockUserServiceMockRecorder) CreateFavourite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavourite", reflect.TypeOf((*MockUserService)(nil).CreateFavourite), arg0)
}

// DeleteFavourite mocks base method.
func (m *MockUserService) DeleteFavourite(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavourite", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFavourite indicates an expected call of DeleteFavourite.
func (mr *MockUserServiceMockRecorder) DeleteFavourite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavourite", reflect.TypeOf((*MockUserService)(nil).DeleteFavourite), arg0)
}

// GetFavourites mocks base method.
func (m *MockUserService) GetFavourites(arg0 int) ([]contracts.Favourite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavourites", arg0)
	ret0, _ := ret[0].([]contracts.Favourite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavourites indicates an expected call of GetFavourites.
func (mr *MockUserServiceMockRecorder) GetFavourites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavourites", reflect.TypeOf((*MockUserService)(nil).GetFavourites), arg0)
}

// Login mocks base method.
func (m *MockUserService) Login(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockUserService) Logout(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUserServiceMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserService)(nil).Logout), arg0)
}

// Register mocks base method.
func (m *MockUserService) Register(arg0 *contracts.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), arg0)
}
