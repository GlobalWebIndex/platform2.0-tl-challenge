// Code generated by MockGen. DO NOT EDIT.
// Source: go-gwi/services (interfaces: CatsService)

// Package mock_services is a generated GoMock package.
package mock_services

import (
	contracts "go-gwi/api/contracts"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCatsService is a mock of CatsService interface.
type MockCatsService struct {
	ctrl     *gomock.Controller
	recorder *MockCatsServiceMockRecorder
}

// MockCatsServiceMockRecorder is the mock recorder for MockCatsService.
type MockCatsServiceMockRecorder struct {
	mock *MockCatsService
}

// NewMockCatsService creates a new mock instance.
func NewMockCatsService(ctrl *gomock.Controller) *MockCatsService {
	mock := &MockCatsService{ctrl: ctrl}
	mock.recorder = &MockCatsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatsService) EXPECT() *MockCatsServiceMockRecorder {
	return m.recorder
}

// GetBreed mocks base method.
func (m *MockCatsService) GetBreed(arg0 int) (contracts.Breed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBreed", arg0)
	ret0, _ := ret[0].(contracts.Breed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBreed indicates an expected call of GetBreed.
func (mr *MockCatsServiceMockRecorder) GetBreed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBreed", reflect.TypeOf((*MockCatsService)(nil).GetBreed), arg0)
}

// GetBreeds mocks base method.
func (m *MockCatsService) GetBreeds(arg0, arg1 int) ([]contracts.Breed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBreeds", arg0, arg1)
	ret0, _ := ret[0].([]contracts.Breed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBreeds indicates an expected call of GetBreeds.
func (mr *MockCatsServiceMockRecorder) GetBreeds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBreeds", reflect.TypeOf((*MockCatsService)(nil).GetBreeds), arg0, arg1)
}

// GetCats mocks base method.
func (m *MockCatsService) GetCats(arg0, arg1 int) ([]contracts.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCats", arg0, arg1)
	ret0, _ := ret[0].([]contracts.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCats indicates an expected call of GetCats.
func (mr *MockCatsServiceMockRecorder) GetCats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCats", reflect.TypeOf((*MockCatsService)(nil).GetCats), arg0, arg1)
}

// GetCatsByBreedId mocks base method.
func (m *MockCatsService) GetCatsByBreedId(arg0, arg1, arg2 int) ([]contracts.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatsByBreedId", arg0, arg1, arg2)
	ret0, _ := ret[0].([]contracts.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatsByBreedId indicates an expected call of GetCatsByBreedId.
func (mr *MockCatsServiceMockRecorder) GetCatsByBreedId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatsByBreedId", reflect.TypeOf((*MockCatsService)(nil).GetCatsByBreedId), arg0, arg1, arg2)
}

// GetRandomCats mocks base method.
func (m *MockCatsService) GetRandomCats() ([]contracts.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomCats")
	ret0, _ := ret[0].([]contracts.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomCats indicates an expected call of GetRandomCats.
func (mr *MockCatsServiceMockRecorder) GetRandomCats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomCats", reflect.TypeOf((*MockCatsService)(nil).GetRandomCats))
}
